name: Deploy to Azure VM

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  TARGET_DIR: /src/bsidesnova
  SERVICE_NAME: exfil.service
  PYTHON_BIN: /usr/bin/python3

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create SSH Private Key on Runner
        run: |
          echo "${{ secrets.AZURE_SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Prepare target directory with sudo
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USER }}
          key_path: "private_key.pem"
          envs: TARGET_DIR
          script: |
            set -e
            sudo mkdir -p "${TARGET_DIR}"
            sudo chown -R "$USER":"$USER" "${TARGET_DIR}"

      - name: Copy project to VM
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USER }}
          key_path: "private_key.pem"
          source: "bsidesnova/"
          target: "${{ env.TARGET_DIR }}/"
          rm: false
          strip_components: 0

      - name: Install deps in venv & restart service
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USER }}
          key_path: "private_key.pem"
          script_stop: true
          envs: TARGET_DIR,PYTHON_BIN,SERVICE_NAME
          script: |
            set -euo pipefail

            # Ensure Python venv tooling exists (externally-managed Python needs python3[-X]-venv)
            PY_VER="$("${PYTHON_BIN}" -c 'import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")')"
            if ! "${PYTHON_BIN}" -m venv --help >/dev/null 2>&1; then
              sudo apt-get update -y
              # Try versioned venv first, then generic
              sudo apt-get install -y "python${PY_VER}-venv" || sudo apt-get install -y python3-venv
            fi

            # Ensure pip is available (some minimal images lack it)
            if ! "${PYTHON_BIN}" -m pip -V >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y python3-pip
            fi

            cd "${TARGET_DIR}"

            # Create/refresh virtual environment
            if [ ! -d ".venv" ]; then
              "${PYTHON_BIN}" -m venv .venv
            fi
            # shellcheck disable=SC1091
            . .venv/bin/activate

            # Upgrade base tooling inside the venv
            python -m pip install --upgrade pip setuptools wheel

            # Install app requirements
            if [ -f "requirements.txt" ]; then
              pip install -r requirements.txt
            else
              pip install flask flask-cors pillow
            fi

            # Restart systemd service
            sudo systemctl daemon-reload || true
            sudo systemctl enable "${SERVICE_NAME}"
            sudo systemctl restart "${SERVICE_NAME}"

            # Health check
            sleep 2
            curl -fsS "http://127.0.0.1:8080/fetch-logs/?n=1" >/dev/null || (sudo journalctl -u "${SERVICE_NAME}" --no-pager -n 100; exit 1)

      - name: Show service status on failure
        if: failure()
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USER }}
          key_path: "private_key.pem"
          envs: SERVICE_NAME
          script: |
            sudo systemctl status "${SERVICE_NAME}" --no-pager || true
            sudo journalctl -u "${SERVICE_NAME}" -n 200 --no-pager || true
